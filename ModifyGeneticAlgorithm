using System;
using System.Collections.Generic;

public class GeneticAlgorithm
{
    static void Main(string[] args)
    {
        run(new SqrtChromosome(), 100, 100);
    }

    public static void run(Chromosome prototype, int size, int maxGen)
    {
        Population pop = new Population();
        pop.initialize(prototype, size);
        for (int genIdx = 0; genIdx < maxGen; genIdx++)
        {
            pop = pop.reproduction();
            Console.WriteLine("================Population {0}================", genIdx);
            pop.print();
        }
        Console.ReadLine();
    }
}

public class Population : List<Chromosome>
{
    static Random random = new Random(7);
    int mutationRate = 0;

    public void initialize(Chromosome prototype, int popSize)
    {
        this.Clear();
        for (int i = 0; i < popSize; i++)
        {
            Chromosome newChrom = prototype.randomInstance();
            newChrom.calcFitness();
            this.Add(newChrom);
        }
    }

    public Chromosome selection()
    {
        int shoot = random.Next((Count * Count) / 2);
        int select = (int)Math.Floor(Math.Sqrt(shoot * 2));
        return (Chromosome)this[select];
    }

    private static int compare(Chromosome a, Chromosome b)
    {
        if (a.fitness > b.fitness) return 1;
        else if (a.fitness < b.fitness) return -1;
        else return 0;
    }

    public Population reproduction()
    {
        this.Sort(compare);
        Population newPop = new Population();
        for (int i = 0; i < Count; i++)
        {
            Chromosome parent1 = selection();
            Chromosome parent2 = selection();
            Chromosome child = parent1.crossover(parent2);
            double prob = random.NextDouble();
            if (prob < mutationRate) child.mutate();
            child.calcFitness();
            newPop.Add(child);
        }
        newPop.Sort(compare);
        return newPop;
    }

    public void print()
    {
        int i = 1;
        foreach (Chromosome c in this)
        {
            Console.WriteLine("{0:##} : {1}", i, c.ToString());
            i++;
        }
    }
}

public abstract class Chromosome
{
    public double fitness;
    abstract public double calcFitness();
    abstract public Chromosome crossover(Chromosome spouse);
    abstract public void mutate();
    abstract public Chromosome randomInstance();
}

public class SqrtChromosome : Chromosome
{
    public static Random random = new Random(7);

    public int value;
    public int k = 2;

    public override double calcFitness()
    {
        int x = value;
        double y1 = (9900 / (x + 6072));
        double y2 = (24000 / (x + 6072));
        double opty2 = y2 - 0.1 / (4 - 0.1);
        if (y1 >= 0.9)
            y1 = 0.9;
        fitness = 0.5 * y1 + 0.5 * opty2;
        return fitness;
    }

    public override Chromosome crossover(Chromosome spouse)
    {
        SqrtChromosome ss = spouse as SqrtChromosome;
        int cutIdx = random.Next(32); // 選擇隨機位置進行 crossover
        int mask = (1 << cutIdx) - 1;
        int head = value & mask;
        int tail = ss.value & ~mask;
        SqrtChromosome child = new SqrtChromosome();
        child.value = head | tail;
        return child;
    }

    public override void mutate()
    {
        int delta = random.Next(3) - 1; // -1, 0, or +1
        int newValue = value + delta * 11;
        if (newValue >= 0 && newValue <= 12727)
        {
            value = newValue;
        }
    }

    public override Chromosome randomInstance()
    {
        SqrtChromosome chrom = new SqrtChromosome();
        int v = random.Next(1153) * 11; // 1153 * 11 is the largest multiple of 11 <= 12727
        chrom.value = v;
        return chrom;
    }

    public override string ToString()
    {
        return String.Format("chromosome={0} fitness={1}", value, fitness);
    }
}


