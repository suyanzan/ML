using System;
using Accord.Neuro;
using Accord.Neuro.Learning;

namespace NeuralNetworkExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // Input data for AND gate
            double[][] input =
            {
                new double[] {0, 0},
                new double[] {0, 1},
                new double[] {1, 0},
                new double[] {1, 1}
            };

            // Expected output for AND gate
            double[][] output =
            {
                new double[] {0},
                new double[] {0},
                new double[] {0},
                new double[] {1}
            };

            // Create a neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
            ActivationNetwork network = new ActivationNetwork(
                new SigmoidFunction(), // Sigmoid activation function
                2,                    // Number of inputs
                2,                    // Number of hidden neurons
                1                     // Number of outputs
            );

            // Initialize random weights
            new NguyenWidrow(network).Randomize();

            // Create a BackPropagation learning algorithm
            BackPropagationLearning teacher = new BackPropagationLearning(network);

            // Set learning rate and momentum
            teacher.LearningRate = 0.1;
            teacher.Momentum = 0.0;

            // Train the network
            double error;
            int epoch = 0;
            do
            {
                error = teacher.RunEpoch(input, output);
                Console.WriteLine($"Epoch {epoch}, Error: {error}");
                epoch++;
            } while (error > 0.01 && epoch < 10000); // Train until error is sufficiently small or maximum epochs reached

            // Test the trained network
            for (int i = 0; i < input.Length; i++)
            {
                double[] predicted = network.Compute(input[i]);
                Console.WriteLine($"Input: [{string.Join(", ", Array.ConvertAll(input[i], x => x.ToString()))}], Expected: [{output[i][0]}], Predicted: [{predicted[0]}]");
            }

            Console.ReadLine();
        }
    }
}
